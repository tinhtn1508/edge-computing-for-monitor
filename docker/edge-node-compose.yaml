version: "3.3"
services:
  edge-rabbitmq3:
    image: rabbitmq:3-management-alpine
    ports:
      - "15672:15672"
    environment:
      RABBITMQ_ERLANG_COOKIE: "secret cookie here"
    networks:
      - edge
    restart: always
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 10s
      timeout: 10s
      retries: 10

  edge-sensor1:
    image: duongtomho/sensor:latest
    ports:
      - "5000:5000"
    networks:
      - edge
    depends_on:
      edge-rabbitmq3:
        condition: service_healthy
    restart: always
    volumes:
      - ./../sensors:/sensors
      - ./../configs:/sensors/configs
    environment:
      EDGE_CONF_FILE: "./configs/edge-sensor.yaml"
      RMQ_TOPIC: "measurement.sensors.sensor1"
      RMQ_QUEUES: "measurement.sensors.sensor1"
      RMQ_MESSGAE_TYPE: "json"
      SERVER_API_PORT: 5000

  edge-sensor2:
    image: duongtomho/sensor:latest
    ports:
      - "5001:5000"
    networks:
      - edge
    depends_on:
      edge-rabbitmq3:
        condition: service_healthy
    restart: always
    volumes:
      - ./../sensors:/sensors
      - ./../configs:/sensors/configs
    environment:
      EDGE_CONF_FILE: "./configs/edge-sensor.yaml"
      RMQ_TOPIC: "measurement.sensors.sensor2"
      RMQ_QUEUES: "measurement.sensors.sensor2"
      RMQ_MESSGAE_TYPE: "json"
      SERVER_API_PORT: 5000
    deploy:
      restart_policy:
        condition: any
        delay: 9s
        window: 60s
    command: >
      sh -c "sleep 10 &&
              python main.py"

  edge-processor:
    image: trhoangtuan96/edge-processor:latest
    networks:
      - edge
      - docker_broker
    depends_on:
      edge-rabbitmq3:
        condition: service_healthy
      kafka:
        condition: service_healthy
      edge-influxdb:
        condition: service_healthy
    restart: always
    volumes:
      - ./../edge-node/processor:/app

  edge-influxdb:
    image: "influxdb"
    networks:
      edge:
        ipv4_address: 172.29.0.10
    restart: always
    healthcheck:
      test: "curl -f http://localhost:8086/ping"
      interval: 10s
      timeout: 10s
      retries: 10

  edge-grafana:
    image: "grafana/grafana"
    ports:
      - "3000:3000"
    networks:
      - edge
    restart: always

networks:
  edge:
    driver: bridge
    ipam:
      config:
        - subnet: 172.29.0.0/16
  docker_broker:
    external: true
